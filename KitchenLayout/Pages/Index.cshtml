@page
@model KitchenLayout.Pages.IndexModel
@{
    ViewData["Title"] = "Кухонный план";
}

<h1>Создание плана кухни</h1>

<form method="post">
    <div>
        <label>Ширина кухни (м):</label>
        <input type="number" name="Width" required value="@Model.Width" />
    </div>
    <div>
        <label>Длина кухни (м):</label>
        <input type="number" name="Depth" required value="@Model.Depth" />
    </div>
    <div>
        <label>Позиция трубы (X):</label>
        <input type="number" name="Sinkx" required value="@Model.SinkX" />
    </div>
    <div>
        <label>Позиция трубы (Y):</label>
        <input type="number" name="SinkY" required value="@Model.SinkY" />
    </div>
    <div>
        <label>Ширина мойки (м):</label>
        <input type="number" name="SinkWidth" required value="@Model.SinkWidth" />
    </div>
    <div>
        <label>Длина мойки (м):</label>
        <input type="number" name="SinkDepth" required value="@Model.SinkDepth" />
    </div>
    <div>
        <label>Мойка угловая:</label>
        <input type="checkbox" name="SinkIsCorner" value="true" @(Model.SinkIsCorner ? "checked" : "") />
    </div>
    <div>
        <label>Ширина плиты (м):</label>
        <input type="number" name="StoveWidth" required value="@Model.StoveWidth" />
    </div>
    <div>
        <label>Длина плиты (м):</label>
        <input type="number" name="StoveDepth" required value="@Model.StoveDepth" />
    </div>
    <div>
        <label>Плита угловая:</label>
        <input type="checkbox" name="StoveIsCorner" value="true" @(Model.StoveIsCorner ? "checked" : "") />
    </div>
    <button type="submit">Создать план</button>
</form>

@if (Model.Room != null)
{
    <h2>Координатная сетка</h2>
    <svg width="@(Model.Room.Width * 10)" height="@(Model.Room.Depth * 10)" xmlns="http://www.w3.org/2000/svg">
        <defs>
            <pattern id="smallGrid" width="10" height="10" patternUnits="userSpaceOnUse">
                <path d="M 10 0 L 0 0 0 10" fill="none" stroke="gray" stroke-width="0.5" />
            </pattern>
            <pattern id="grid" width="100" height="100" patternUnits="userSpaceOnUse">
                <rect width="100" height="100" fill="url(#smallGrid)" />
                <path d="M 100 0 L 0 0 0 100" fill="none" stroke="blue" stroke-width="1" />
            </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#grid)" />

        @if (Model.Room.Sink != null)
        {
            <rect x="@(Model.Room.Sink.Position.X * 10)"
                  y="@(Model.Room.Depth * 10 - Model.Room.Sink.Position.Y * 10 - Model.Room.Sink.Depth * 10)"
                  width="@(Model.Room.Sink.Width * 10)"
                  height="@(Model.Room.Sink.Depth * 10)"
                  fill="white"
                  stroke="@(string.IsNullOrEmpty(Model.Room.ErrorMessage) ? "black" : "red")"
                  stroke-width="2" />
        }

        @if (Model.Room.Stove != null)
        {
            <rect x="@(Model.Room.Stove.Position.X * 10)"
                  y="@(Model.Room.Depth * 10 - Model.Room.Stove.Position.Y * 10 - Model.Room.Stove.Depth * 10)"
                  width="@(Model.Room.Stove.Width * 10)"
                  height="@(Model.Room.Stove.Depth * 10)"
                  fill="white"
                  stroke="@(string.IsNullOrEmpty(Model.Room.ErrorMessage) ? "black" : "red")"
                  stroke-width="2" />
        }
    </svg>

    @if (!string.IsNullOrEmpty(Model.Room.ErrorMessage))
    {
        <div style="color:red;">
            <strong>Ошибка:</strong> @Model.Room.ErrorMessage
        </div>
    }
}








